[["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/__tests__/components/Accordion/AccordionFooter.test.tsx",{"fileContent":"/* eslint-disable no-console */\nimport React from \"react\";\nimport { shallow } from \"enzyme\";\nimport AccordionFooter from \"../../../src/components/Accordion/AccordionFooter\";\n\ndescribe(\"<AccordionFooter />\", () => {\n  const tree = shallow(<AccordionFooter value=\"1234\" />);\n\n  describe(\"Should Render\", () => {\n    it(\"Should match snapshot\", () => {      \n      expect(tree).toMatchSnapshot();\n    });\n  });\n});\n","resolvedModuleNames":["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/Accordion/AccordionFooter/index.tsx"]}],["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/Accordion/AccordionFooter/index.tsx",{"fileContent":"import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\n\ntype AFProps = {\n  value: string;\n};\n\nconst AccordionFooter = ({ value = \"\" }: AFProps) => {\n  return (\n    <>\n      <Typography\n        sx={{\n          fontWeight: 700,\n          marginTop: \"1rem\",\n          backgroundColor: \"aliceblue\",\n          padding: \"1rem\",\n          borderRadius: \"5px\",\n          width: \"100%\",\n        }}\n      >\n        {value}\n      </Typography>\n    </>\n  );\n};\n\nexport default AccordionFooter;\n","resolvedModuleNames":[]}],["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/__tests__/components/Accordion/AccordionHeader.test.tsx",{"fileContent":"/* eslint-disable no-console */\nimport React from \"react\";\nimport { shallow } from \"enzyme\";\nimport AccordionHeader from \"../../../src/components/Accordion/AccordionHeader\";\n\ndescribe(\"<AccordionFooter />\", () => {\n  const tree = shallow(<AccordionHeader header=\"1234\" />);\n\n  describe(\"Should Render\", () => {\n    it(\"Should match snapshot\", () => {      \n      expect(tree).toMatchSnapshot();\n    });\n  });\n});\n","resolvedModuleNames":["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/Accordion/AccordionHeader/index.tsx"]}],["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/Accordion/AccordionHeader/index.tsx",{"fileContent":"import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\n\ntype AHProps = {\n  header: string;\n};\n\nconst AccordionHeader = ({ header }: AHProps) => {\n  return (\n    <>\n      <Typography\n        sx={{\n          fontWeight: 700,\n          margin: \"16px\",\n          backgroundColor: \"aliceblue\",\n          padding: \"16px\",\n          color: \"#011F4B\"\n        }}\n      >\n        {header}\n      </Typography>\n    </>\n  );\n};\n\nexport default AccordionHeader;\n","resolvedModuleNames":[]}],["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/__tests__/components/Accordion/AccordionSummary.test.tsx",{"fileContent":"/* eslint-disable no-console */\nimport React from \"react\";\nimport { shallow } from \"enzyme\";\nimport AccordionSummary from \"../../../src/components/Accordion/AccordionSummary\";\n\ndescribe(\"<AccordionFooter />\", () => {\n  const tree = shallow(<AccordionSummary projectName=\"Project name\" grandTotalPayment=\"1235\" />);\n\n  describe(\"Should Render\", () => {\n    it(\"Should match snapshot\", () => {      \n      expect(tree).toMatchSnapshot();\n    });\n  });\n});\n","resolvedModuleNames":["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/Accordion/AccordionSummary/index.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/util/constants.ts"]}],["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/Accordion/AccordionSummary/index.tsx",{"fileContent":"import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { report } from \"../../../util/constants\";\nimport \"./styles.css\";\n\ntype TProps = {\n  projectName: string;\n  grandTotalPayment: string;\n};\n\nconst AccordionSummary = ({ projectName, grandTotalPayment }: TProps) => (\n  <>\n    <div className=\"accordion-summary-container\">\n      <Typography\n        sx={{\n          fontWeight: 700,\n        }}\n      >\n        {projectName}\n      </Typography>\n      <Typography\n        sx={{\n          fontWeight: 700,\n        }}\n      >{`${report.TOTAL} : ${grandTotalPayment} ${report.USD}`}</Typography>\n    </div>\n  </>\n);\n\nexport default AccordionSummary;\n","resolvedModuleNames":["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/util/constants.ts"]}],["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/util/constants.ts",{"fileContent":"export const report = {\n  REPORTS: \"Reports\",\n  GENERATE_REPORT: \"Generate report\",\n  EAISLY_GENRETAE_REPORT: \"Easily generate a report of your transactions\",\n  ALL_PROJECTS: \"All projects\",\n  ALL_GATEWAYS: \"All gateways\",\n  GATEWAY: \"gateway\",\n  PROJECT: \"project\",\n  FROM_DATE: \"From date\",\n  TO_DATE: \"To date\",\n  USD: \"USD\",\n  TOTAL: \"TOTAL\",\n  GATEWAY_TOTAL: \"GATEWAY TOTAL\",\n  TERMS_CONDITIONS: \"Terms&Conditions | Privacy policy\",\n};\n\nexport const colors = [\"#A259FF\", \"#FFC107\", \"#F24E1E\", \"#6497B1\"];\n","resolvedModuleNames":[]}],["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/__tests__/page/report.test.tsx",{"fileContent":"/* eslint-disable no-console */\nimport React from \"react\";\nimport { shallow } from \"enzyme\";\nimport Report from \"../../src/page/Report\";\n\ndescribe(\"<AccordionFooter />\", () => {\n  const tree = shallow(<Report />);\n\n  describe(\"Should Render\", () => {\n    it(\"Should match snapshot\", () => {  \n      expect(tree).toMatchSnapshot();\n    });\n  });\n});\n","resolvedModuleNames":["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/page/Report/index.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/SimpleTable/index.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/Select/index.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/Date/index.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/DonutChart/index.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/Accordion/index.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/Accordion/AccordionSummary/index.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/Accordion/AccordionFooter/index.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/DonutChart/donutHead.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/Accordion/AccordionHeader/index.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/util/helper.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/page/Report/useReportController.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/page/Report/type.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/util/constants.ts"]}],["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/page/Report/index.tsx",{"fileContent":"import React from \"react\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Typography from \"@mui/material/Typography\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Grid from \"@mui/material/Grid\";\nimport SimpleTable from \"../../components/SimpleTable\";\nimport Select from \"../../components/Select\";\nimport DateSelector from \"../../components/Date\";\nimport ChartComponent from \"../../components/DonutChart\";\nimport CustomAccordion from \"../../components/Accordion\";\nimport CustomisedTableRow from \"../../components/Accordion/AccordionSummary\";\nimport AccordionFooter from \"../../components/Accordion/AccordionFooter\";\nimport DonutHead from \"../../components/DonutChart/donutHead\";\nimport AccordionHeader from \"../../components/Accordion/AccordionHeader\";\nimport { totalsGenerator } from \"util/helper\";\nimport useReportController from \"./useReportController\";\nimport { ItemType } from \"./type\";\nimport { report } from \"util/constants\";\n\nconst Report = () => {\n  const {\n    isLoading,\n    formatProjectData,\n    projectValue,\n    gatewayLoading,\n    formatGatewayData,\n    gateWayValue,\n    displayGateway,\n    tableHead,\n    accordionData,\n    donutChart,\n    projectData,\n    gatewayData,\n    grandTotal,\n    selectGateway,\n    selectFromDate,\n    selectToDate,\n    handleReport,\n    selectProject,\n  } = useReportController();\n  return (\n    <>\n      <div className=\"tableMainContent\">\n        <div className=\"tableContent\">\n          <Typography\n            variant=\"h5\"\n            component=\"h2\"\n            sx={{ marginRight: \"15rem\", fontSize: 24, fontWeight: 700, color: '#011F4B' }}\n          >\n            {report.REPORTS}\n          </Typography>\n          <Box component=\"span\" sx={{ display: \"block\", fontSize: 16, fontWeight: 700, color: '#7E8299' }}>\n            {report.EAISLY_GENRETAE_REPORT}\n          </Box>\n        </div>\n        {isLoading ? (\n          <CircularProgress disableShrink />\n        ) : (\n          formatProjectData && (\n            <Select\n              initialLabel={report.ALL_PROJECTS}\n              selectData={formatProjectData}\n              handleChange={selectProject}\n              value={projectValue}\n            />\n          )\n        )}\n\n        {gatewayLoading ? (\n          <CircularProgress disableShrink />\n        ) : (\n          formatGatewayData && (\n            <Select\n              initialLabel={report.ALL_GATEWAYS}\n              selectData={formatGatewayData}\n              handleChange={selectGateway}\n              value={gateWayValue}\n            />\n          )\n        )}\n        <DateSelector initialLabel={report.FROM_DATE} handleChange={selectFromDate} />\n        <DateSelector initialLabel={report.TO_DATE} handleChange={selectToDate} />\n        <Button variant=\"contained\" disableElevation onClick={handleReport}>\n          {report.GENERATE_REPORT}\n        </Button>\n      </div>\n      <Grid container sx={{ marginTop: \"2rem\" }}>\n        <Grid\n          item\n          xs={12}\n          md={displayGateway ? 6 : 12}\n          sx={{ backgroundColor: \"aliceblue\", borderRadius: \"12px\" }}\n        >\n          <AccordionHeader header={tableHead} />\n          {accordionData === null ? (\n            <CircularProgress disableShrink />\n          ) : (\n            accordionData &&\n            accordionData.map((item: ItemType) =>\n              projectData !== null && gatewayData !== null ? (\n                <SimpleTable rows={item.data} />\n              ) : (\n                <CustomAccordion\n                  Component={\n                    <CustomisedTableRow\n                      grandTotalPayment={totalsGenerator(item.data)}\n                      projectName={item.projectName}\n                    />\n                  }\n                  key={`accordion-${Math.random()}`}\n                >\n                  <SimpleTable rows={item.data} />\n                </CustomAccordion>\n              )\n            )\n          )}\n        </Grid>\n\n        {displayGateway ? (\n          <Grid item xs={12} md={6}>\n            <DonutHead data={donutChart} />\n            <ChartComponent data={donutChart} />\n            <AccordionFooter value={`${report.GATEWAY_TOTAL} : ${grandTotal} ${report.USD}`} />\n          </Grid>\n        ) : (\n          \"\"\n        )}\n        {displayGateway ? null : (\n          <AccordionFooter value={`${report.TOTAL} : ${grandTotal} ${report.USD}`} />\n        )}\n      </Grid>\n    </>\n  );\n};\n\nexport default Report;\n","resolvedModuleNames":["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/SimpleTable/index.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/Select/index.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/Date/index.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/DonutChart/index.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/Accordion/index.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/Accordion/AccordionSummary/index.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/Accordion/AccordionFooter/index.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/DonutChart/donutHead.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/Accordion/AccordionHeader/index.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/util/helper.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/page/Report/useReportController.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/page/Report/type.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/util/constants.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/types/index.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/SimpleTable/tableRow.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/SimpleTable/tableCell.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/Select/selectStyle.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/DonutChart/drawChart.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/hooks/useAsync.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/util/apis.ts"]}],["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/SimpleTable/index.tsx",{"fileContent":"import * as React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport { RowsType } from \"types\"; \nimport \"./style.css\";\nimport StyledTableRow from \"./tableRow\";\nimport StyledTableCell from \"./tableCell\";\n\ntype TSimpleTableProps = {\n  rows: RowsType[];\n};\n\nconst SimpleTable = ({ rows = [] }: TSimpleTableProps) => {\n  return (\n    <>\n      <TableContainer component={Paper}>\n        <Table aria-label=\"customized table\">\n          <TableHead>\n            <TableRow>\n              {rows &&\n                rows.length > 0 &&\n                rows[0].data.map((row) => (\n                  <StyledTableCell key={`${row.label}`}>\n                    {row.label}\n                  </StyledTableCell>\n                ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map(({ paymentId, data = [] }: RowsType) => (\n              <StyledTableRow key={paymentId}>\n                {data.map((item) => (\n                  <StyledTableCell\n                    key={`${paymentId}-${item.value}`}\n                    component=\"th\"\n                    scope=\"row\"\n                  >\n                    {item.value}\n                  </StyledTableCell>\n                ))}\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n};\nexport default React.memo(SimpleTable);\n","resolvedModuleNames":["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/types/index.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/SimpleTable/tableRow.tsx","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/SimpleTable/tableCell.tsx"]}],["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/SimpleTable/tableRow.tsx",{"fileContent":"import { styled } from \"@mui/material/styles\";\nimport TableRow from \"@mui/material/TableRow\";\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n  \"&:nth-of-type(odd)\": {\n    backgroundColor: theme.palette.action.hover,\n  },\n  \"&:last-child td, &:last-child th\": {\n    border: 0,\n  },\n}));\nexport default StyledTableRow;","resolvedModuleNames":[]}],["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/SimpleTable/tableCell.tsx",{"fileContent":"import { styled } from \"@mui/material/styles\";\nimport { TableCell, tableCellClasses } from \"@mui/material\";\n\nexport default styled(TableCell)(({ theme }) => ({\n  [`&.${tableCellClasses.head}`]: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n  [`&.${tableCellClasses.body}`]: {\n    fontSize: 14,\n  },\n}));\n","resolvedModuleNames":[]}],["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/Select/index.tsx",{"fileContent":"/* eslint-disable @typescript-eslint/ban-types */\nimport * as React from \"react\";\nimport {\n  SelectUnstyled,\n  SelectUnstyledProps,\n} from \"@mui/base/\";\nimport { StyledButton, StyledListbox, StyledOption } from './selectStyle'\n\ntype SelectType = {\n  initialLabel: string;\n  selectData: mapType[];\n  handleChange: (e: HTMLInputElement | null) => void;\n  value: HTMLInputElement | null | undefined;\n};\ntype mapType = {\n  name: string;\n  id: string;\n  type: string;\n};\n\nconst CustomSelect = React.forwardRef(function CustomSelect<TValue extends {}>(\n  props: SelectUnstyledProps<TValue>\n) {\n  const components: SelectUnstyledProps<TValue>[\"components\"] = {\n    Root: StyledButton,\n    Listbox: StyledListbox,\n    ...props.components,\n  };\n\n  return <SelectUnstyled {...props} components={components} />;\n}) as <TValue extends {}>(\n  props: SelectUnstyledProps<TValue> & React.RefAttributes<HTMLUListElement>\n) => JSX.Element;\n\nconst Select = ({\n  initialLabel,\n  selectData,\n  handleChange,\n  value,\n}: SelectType) => {\n  return (\n    <CustomSelect defaultValue={null} onChange={handleChange} value={value} >\n      <StyledOption value={null}>{initialLabel}</StyledOption>\n      {selectData.map(({ name, id }: mapType) => (\n        <StyledOption value={id} key={id}>\n          {name}\n        </StyledOption>\n      ))}\n    </CustomSelect>\n  );\n};\n\nexport default Select;","resolvedModuleNames":["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/Select/selectStyle.tsx"]}],["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/Select/selectStyle.tsx",{"fileContent":"import {\n  selectUnstyledClasses,\n} from \"@mui/base/\";\nimport OptionUnstyled from \"@mui/base/OptionUnstyled\";\nimport { styled } from \"@mui/system\";\n\nexport const StyledButton = styled(\"button\")(\n  () => `\n      font-family: IBM Plex Sans, sans-serif;\n      font-size: 0.875rem;\n      box-sizing: border-box;\n      min-height: calc(1.5em + 22px);\n      min-width: 135px;\n      background: #1BC5BD;\n      border: 1px solid #fff;\n      border-radius: 5px;\n      margin: 0.5em;\n      padding: 6px 10px 10px 10px;\n      text-align: left;\n      line-height: 1.5;\n      color: #fff;\n      height: 32px;\n      &.${selectUnstyledClasses.expanded} {\n        &::after {\n          content: '▴';\n        }\n      }\n    \n      &::after {\n        content: '▾';\n        float: right;\n      }\n      `\n);\n  \nexport const StyledListbox = styled(\"ul\")(\n  () => `\n      font-family: IBM Plex Sans, sans-serif;\n      font-size: 0.875rem;\n      box-sizing: border-box;\n      padding: 5px;\n      margin: 1px 0;\n      min-width: 135px;\n      background: #1BC5BD;\n      border: 1px solid #fff;\n      border-radius: 5px;\n      color: #fff;\n      overflow: auto;\n      outline: 0px;\n      text-align: left;\n      `\n);\n  \nexport const StyledOption = styled(OptionUnstyled)(\n  () => `\n      list-style: none;\n      padding: 8px;\n      border-radius: 0.45em;\n      cursor: pointer;    \n      &:last-of-type {\n        border-bottom: none;\n      }`\n);","resolvedModuleNames":[]}],["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/Date/index.tsx",{"fileContent":"import * as React from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport DatePicker from \"@mui/lab/DatePicker\";\nimport { TDateTarget } from \"types\";\nimport \"./style.css\";\n\ntype DateType = {\n  initialLabel: string;\n  handleChange: (e: TDateTarget) => void;\n};\n\nexport default function DateSelector({ initialLabel, handleChange }: DateType) {\n  const [value, setValue] = React.useState<Date | null>(null);\n  const handleChangeDate = (target: Date | null) => {\n    handleChange(target as TDateTarget);\n  };\n\n  return (\n    <LocalizationProvider\n      dateAdapter={AdapterDateFns}\n      onChange={handleChangeDate(value)}\n      sx={{border:'none'}}\n    >\n      <DatePicker\n        label={initialLabel}\n        value={value}\n        onChange={(newValue) => {\n          setValue(newValue);\n        }}\n        renderInput={(params) => (\n          <TextField {...params} helperText={params?.inputProps?.placeholder} />\n        )}\n      />\n    </LocalizationProvider>\n  );\n}\n","resolvedModuleNames":["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/types/index.ts"]}],["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/DonutChart/index.tsx",{"fileContent":"import React, { useRef } from \"react\";\nimport drawChart from \"./drawChart\";\nimport { GenericTableData } from \"types\";\nimport \"./style.css\";\n\nconst DonutChart = ({ data }: { data: GenericTableData[] }) => {\n  const ref = useRef(null);\n  \n  if (ref.current) drawChart(ref.current, data);\n  return (\n    <div className=\"container\">\n      <div className=\"graph\" ref={ref} />\n    </div>\n  );\n};\n\nexport default React.memo(DonutChart);\n","resolvedModuleNames":["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/DonutChart/drawChart.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/types/index.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/util/helper.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/util/constants.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/DonutChart/types.ts"]}],["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/DonutChart/drawChart.ts",{"fileContent":"import { select, arc, interpolate, pie } from \"d3\";\nimport { totalDonutValue, calculatePercentage } from \"util/helper\";\nimport { TGenericDataType, GenericTableData } from \"types\";\nimport { colors } from \"util/constants\";\nimport { DType, DataType } from \"./types\";\n\nconst drawChart = (element: string, data: GenericTableData[]) => {\n  const total = totalDonutValue(data);\n  const boxSize = 500;\n\n  select(element).select(\"svg\").remove();\n  const svg = select(element)\n    .append(\"svg\")\n    .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n    .attr(\"height\", \"100%\")\n    .attr(\"width\", \"100%\")\n    .attr(\"viewBox\", `0 0 ${boxSize} ${boxSize}`)\n    .append(\"g\")\n    .attr(\"transform\", `translate(${boxSize / 2}, ${boxSize / 2})`);\n\n  const arcGenerator: TGenericDataType = arc()\n    .padAngle(0.02)\n    .innerRadius(100)\n    .outerRadius(250);\n\n  const pieGenerator = pie()\n    .startAngle(-0.75 * Math.PI)\n    .value((d: TGenericDataType) => d.value);\n\n  const arcs = svg\n    .selectAll()\n    .data(pieGenerator(data as unknown as DataType))\n    .enter();\n  arcs\n    .append(\"path\")\n    .attr(\"d\", arcGenerator)\n    .style(\"fill\", (d, i) => colors[i % data.length])\n    .transition()\n    .duration(700)\n    .attrTween(\"d\", function (d: DType) {\n      const i = interpolate(d.startAngle, d.endAngle);\n      return function (t) {\n        d.endAngle = i(t);\n        return arcGenerator(d);\n      };\n    });\n\n  arcs\n    .append(\"text\")\n    .attr(\"text-anchor\", \"middle\")\n    .text(\n      (d: TGenericDataType) => `${calculatePercentage(total, d.data.value)}%`\n    ) // label text\n    .style(\"fill\", \"#fff\") // label color\n    .style(\"font-size\", \"30px\") // label size\n    .attr(\"transform\", (d) => {\n      const [x, y] = arcGenerator.centroid(d);\n      return `translate(${x}, ${y})`;\n    })\n    .style(\"font-size\", 0)\n    .transition()\n    .duration(700)\n    .style(\"font-size\", \"26px\");\n\n  // Add inner border\n  svg\n    .append(\"circle\")\n    .attr(\"cx\", 0)\n    .attr(\"cy\", 0)\n    .attr(\"r\", 100) // should be same as innerRadius value\n    .attr(\"fill\", \"transparent\")\n    .transition()\n    .duration(700)\n    .attr(\"stroke-width\", 8);\n};\n\nexport default drawChart;\n","resolvedModuleNames":["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/util/helper.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/types/index.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/util/constants.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/DonutChart/types.ts"]}],["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/util/helper.ts",{"fileContent":"import { GenericTableData, RowsType } from \"types\";\n\nexport const totalsGenerator = (rows: RowsType[]) => {\n  let total = 0;\n  rows.forEach((row) =>\n    row.data.forEach((item: GenericTableData) => {\n      if (item.label === \"Amount\") total += parseInt(item.value, 10);\n    })\n  );\n  return total.toFixed(2);\n};\n\nexport const totalDonutValue = (data: GenericTableData[]) => {\n  let sum = 0;\n  for (let i = 0; i < data.length; i++) {\n    sum += parseInt(data[i].value, 10);\n  }\n  return sum;\n};\nexport const calculatePercentage = (total: number, value: number) => {\n  const num = (value / total) * 100;\n  return num.toFixed(2);\n};\n","resolvedModuleNames":["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/types/index.ts"]}],["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/Accordion/index.tsx",{"fileContent":"import * as React from \"react\";\nimport Accordion from \"@mui/material/Accordion\";\nimport AccordionSummary from \"@mui/material/AccordionSummary\";\nimport AccordionDetails from \"@mui/material/AccordionDetails\";\nimport \"./style.css\";\n\ntype TAccrodionProps = {\n  children: JSX.Element;\n  Component: JSX.Element;\n};\n\nexport default function SimpleAccordion({\n  children,\n  Component,\n}: TAccrodionProps) {\n  return (\n    <>\n      <Accordion className=\"root-accordion\">\n        <AccordionSummary aria-controls=\"panel1a-content\" id=\"panel1a-header\">\n          {Component}\n        </AccordionSummary>\n        <AccordionDetails>{children}</AccordionDetails>\n      </Accordion>\n    </>\n  );\n}\n","resolvedModuleNames":[]}],["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/DonutChart/donutHead.tsx",{"fileContent":"import { Box, Typography } from \"@mui/material\";\nimport { GenericTableData } from \"types\";\nimport { colors } from \"util/constants\";\nimport \"./style.css\";\n\nconst DonutHead = ({ data }: { data: GenericTableData[] }) => (\n  <div className=\"rootDonutHeadHeat\">\n    <div className=\"rootDonutHeat\">\n      {data.map((element: GenericTableData, index: number) => {\n        return (\n          <div className=\"rootDonutHeat\">\n            <Box\n              sx={{\n                width: 30,\n                height: 30,\n                backgroundColor: `${colors[index]}`,\n              }}\n            ></Box>\n            <Typography\n              sx={{\n                paddingLeft: 5,\n                paddingRight: 5,\n                fontsize: 18,\n              }}\n            >\n              {element.label}\n            </Typography>\n          </div>\n        );\n      })}\n    </div>\n  </div>\n);\n\nexport default DonutHead;\n","resolvedModuleNames":["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/types/index.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/util/constants.ts"]}],["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/page/Report/useReportController.tsx",{"fileContent":"import { useState, useEffect, useMemo, useCallback } from \"react\";\nimport moment from \"moment\";\nimport reverse from \"lodash/reverse\";\nimport useAsyncFn from \"hooks/useAsync\";\nimport { totalsGenerator } from \"util/helper\";\nimport { fetchDetailedData, fetchProj, fetchGate } from \"util/apis\";\nimport {\n  GenericTableData,\n  RowsType,\n  TDateTarget,\n  TDateTargetStateAction,\n  TReport,\n  TProjectData,\n  TGatewayData,\n} from \"types\";\nimport { ItemType } from \"./type\";\nimport {\n  GatewayDataType,\n  ProjectAPIType,\n  TableFormatType,\n  TDataFormat,\n  TAccordionData,\n  TFormatData,\n} from \"./type\";\nimport { report } from \"util/constants\";\n\nconst useReportController = () => {\n  const [projectData, setProjectData] = useState(null);\n  const [gatewayData, setGatewayData] = useState(null);\n  const [projectValue, setProjectValue] = useState(null);\n  const [gateWayValue, setGateWayValue] = useState(null);\n  const [fromDateValue, setFromDateValue] = useState(null);\n  const [toDateValue, setToDateValue] = useState(null);\n  const [formatGatewayData, setFormatGatewayData] = useState<TDataFormat[]>([]);\n  const [formatProjectData, setFormatProjectData] = useState<TDataFormat[]>([]);\n  const [accordionData, setAccordionData] = useState<TAccordionData[]>([]);\n  const [donutChart, setDonutChart] = useState<GenericTableData[]>([]);\n  const [tableHead, setTableHead] = useState<string>(\n    `${report.ALL_PROJECTS} | ${report.ALL_GATEWAYS}`\n  );\n  const [grandTotal, setGrandTotal] = useState<number>(0);\n  const {\n    isLoading,\n    res: projData,\n    asyncFunc: fetchProjects,\n  }: ProjectAPIType<TProjectData> = useAsyncFn(fetchProj);\n  const {\n    isLoading: gatewayLoading,\n    res: dataGateway,\n    asyncFunc: fetchGateways,\n  }: ProjectAPIType<TGatewayData> = useAsyncFn(fetchGate);\n\n  const { res: tableData, asyncFunc: fetchTableData }: ProjectAPIType<TReport> =\n    useAsyncFn(fetchDetailedData);\n\n  useEffect(() => {\n    fetchProjects();\n    fetchGateways();\n    fetchTableData({\n      from: \"\",\n      to: \"\",\n      projectId: \"\",\n      gatewayId: \"\",\n    });\n  }, []);\n\n  useEffect(() => {\n    if (projData.data !== undefined) {\n      setFormatProjectData(\n        (projData.data as TProjectData).map(({ projectId, name }) => ({\n          id: projectId,\n          name: name,\n          type: `${report.PROJECT}`,\n        }))\n      );\n    }\n  }, [projData.data]);\n\n  useEffect(() => {\n    if (dataGateway.data !== undefined) {\n      setFormatGatewayData(\n        dataGateway.data.map(({ gatewayId, name }: GatewayDataType) => ({\n          id: gatewayId,\n          name: name,\n          type: `${report.GATEWAY}`,\n        }))\n      );\n    }\n  }, [dataGateway.data]);\n\n  const headerProcessor = (\n    projectData: string | null,\n    gatewayData: string | null\n  ) => {\n    if (projectData === null && gatewayData === null)\n      setTableHead(`${report.ALL_PROJECTS} | ${report.ALL_GATEWAYS}`);\n    else if (projectData === null && gatewayData !== null)\n      setTableHead(`${report.ALL_PROJECTS} |  ${handleName(gatewayData)}`);\n    else if (projectData !== null && gatewayData === null)\n      setTableHead(` ${handleName(projectData)} | ${report.ALL_GATEWAYS}`);\n    else if (projectData !== null && gatewayData !== null)\n      setTableHead(` ${handleName(projectData)} |  ${handleName(gatewayData)}`);\n    else setTableHead(` ${projectData} |  ${gatewayData}`);\n  };\n\n  const handleReport = () => {\n    setProjectData(projectValue);\n    setGatewayData(gateWayValue);\n    fetchTableData({\n      from:\n        fromDateValue === null\n          ? \"\"\n          : moment(fromDateValue).format(\"YYYY-MM-DD\"),\n      to: toDateValue === null ? \"\" : moment(toDateValue).format(\"YYYY-MM-DD\"),\n      projectId: projectValue === null ? \"\" : projectValue,\n      gatewayId: gateWayValue === null ? \"\" : gateWayValue,\n    });\n    headerProcessor(projectValue, gateWayValue);\n  };\n\n  const displayGateway = useMemo(() => {\n    if (\n      (projectData !== null && gatewayData !== null) ||\n      (projectData === null && gatewayData === null)\n    )\n      return false;\n    return true;\n  }, [projectData, gatewayData]);\n\n  const handleName = useCallback(\n    (id: string) => {\n      let formattedData: TDataFormat[] = [];\n      if (formatProjectData) {\n        formattedData = formatProjectData.concat(formatGatewayData);\n      }\n      if (formattedData) {\n        const nameData = formattedData.find((e: TDataFormat) => e.id === id);\n        return nameData?.name;\n      }\n    },\n    [formatGatewayData, formatProjectData]\n  );\n\n  const handleDataFormat = useCallback(\n    (baseData: { data: TFormatData[]; total: number }) => {\n      if (formatProjectData) {\n        let gTotal = 0;\n        const accordionCData = Array.from(\n          new Set(\n            baseData.data.map(({ projectId, gatewayData }: TFormatData) =>\n              projectValue === projectId ? gatewayData : projectId\n            )\n          )\n        ).map((data: string) => {\n          const datas = baseData.data.filter(\n            ({ projectId, gatewayData }: TFormatData) =>\n              projectId === data || gatewayData === data\n          );\n          const total = totalsGenerator(datas as RowsType[]);\n          gTotal += parseInt(total, 10);\n          return {\n            projectName: handleName(data) || \"\",\n            data: datas as RowsType[],\n            total,\n          };\n        });\n        setAccordionData(reverse(accordionCData));\n        setGrandTotal(gTotal);\n      }\n    },\n    [formatProjectData, gatewayData, handleName, projectData]\n  );\n\n  useEffect(() => {\n    if (tableData.data !== undefined) {\n      let total = 0;\n      const formattedTableData = (tableData.data as TReport).map(\n        ({\n          amount,\n          projectId,\n          gatewayId,\n          created,\n          paymentId,\n        }: TableFormatType) => {\n          total += amount;\n          return {\n            paymentId,\n            projectId,\n            gatewayData: gatewayId,\n            data: [\n              { label: \"Date\", value: moment(created).format(\"MM/DD/YYYY\") },\n              { label: \"Gateway\", value: handleName(gatewayId) },\n              { label: \"Transaction ID\", value: paymentId },\n              { label: \"Amount\", value: amount },\n            ],\n          };\n        }\n      );\n      handleDataFormat({ data: formattedTableData, total });\n    }\n  }, [handleDataFormat, handleName, tableData]);\n\n  useEffect(() => {\n    if (accordionData) {\n      const donut = accordionData.map((item: ItemType) => ({\n        label: item.projectName,\n        value: totalsGenerator(item.data),\n      }));\n      setDonutChart(donut);\n    }\n  }, [accordionData]);\n\n  const selectProject = (target: TDateTarget) =>\n    setProjectValue(target as TDateTargetStateAction);\n\n  const selectGateway = (target: TDateTarget) =>\n    setGateWayValue(target as TDateTargetStateAction);\n\n  const selectFromDate = (target: TDateTarget) =>\n    setFromDateValue(target as TDateTargetStateAction);\n\n  const selectToDate = (target: TDateTarget) =>\n    setToDateValue(target as TDateTargetStateAction);\n\n  return {\n    isLoading,\n    projectData,\n    gatewayData,\n    formatProjectData,\n    projectValue,\n    gatewayLoading,\n    formatGatewayData,\n    gateWayValue,\n    displayGateway,\n    tableHead,\n    accordionData,\n    grandTotal,\n    donutChart,\n    selectGateway,\n    selectFromDate,\n    selectToDate,\n    handleReport,\n    handleName,\n    selectProject,\n  };\n};\n\nexport default useReportController;\n","resolvedModuleNames":["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/hooks/useAsync.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/util/helper.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/util/apis.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/types/index.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/page/Report/type.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/util/constants.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/util/apiClient.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/util/urls.ts"]}],["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/__tests__/page/useReportController.test.tsx",{"fileContent":"import moment from \"moment\";\nimport reverse from \"lodash/reverse\";\nimport useAsyncFn from \"../../src/hooks/useAsync\";\nimport { totalsGenerator } from \"../../src/util/helper\";\nimport { fetchDetailedData, fetchProj, fetchGate } from \"../../src/util/apis\";","resolvedModuleNames":["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/hooks/useAsync.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/util/helper.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/util/apis.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/types/index.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/util/apiClient.ts","/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/util/urls.ts"]}]]