{"file":"/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/DonutChart/drawChart.ts","mappings":";;AAAA,yBAAmD;AACnD,sCAAmE;AAEnE,4CAAwC;AAGxC,IAAM,SAAS,GAAG,UAAC,OAAe,EAAE,IAAwB;IAC1D,IAAM,KAAK,GAAG,IAAA,wBAAe,EAAC,IAAI,CAAC,CAAC;IACpC,IAAM,OAAO,GAAG,GAAG,CAAC;IAEpB,IAAA,WAAM,EAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,CAAC;IACvC,IAAM,GAAG,GAAG,IAAA,WAAM,EAAC,OAAO,CAAC;SACxB,MAAM,CAAC,KAAK,CAAC;SACb,IAAI,CAAC,qBAAqB,EAAE,eAAe,CAAC;SAC5C,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC;SACtB,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC;SACrB,IAAI,CAAC,SAAS,EAAE,cAAO,OAAO,cAAI,OAAO,CAAE,CAAC;SAC5C,MAAM,CAAC,GAAG,CAAC;SACX,IAAI,CAAC,WAAW,EAAE,oBAAa,OAAO,GAAG,CAAC,eAAK,OAAO,GAAG,CAAC,MAAG,CAAC,CAAC;IAElE,IAAM,YAAY,GAAqB,IAAA,QAAG,GAAE;SACzC,QAAQ,CAAC,IAAI,CAAC;SACd,WAAW,CAAC,GAAG,CAAC;SAChB,WAAW,CAAC,GAAG,CAAC,CAAC;IAEpB,IAAM,YAAY,GAAG,IAAA,QAAG,GAAE;SACvB,UAAU,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC;SAC3B,KAAK,CAAC,UAAC,CAAmB,IAAK,OAAA,CAAC,CAAC,KAAK,EAAP,CAAO,CAAC,CAAC;IAE3C,IAAM,IAAI,GAAG,GAAG;SACb,SAAS,EAAE;SACX,IAAI,CAAC,YAAY,CAAC,IAA2B,CAAC,CAAC;SAC/C,KAAK,EAAE,CAAC;IACX,IAAI;SACD,MAAM,CAAC,MAAM,CAAC;SACd,IAAI,CAAC,GAAG,EAAE,YAAY,CAAC;SACvB,KAAK,CAAC,MAAM,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,kBAAM,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,EAAvB,CAAuB,CAAC;SAChD,UAAU,EAAE;SACZ,QAAQ,CAAC,GAAG,CAAC;SACb,SAAS,CAAC,GAAG,EAAE,UAAU,CAAQ;QAChC,IAAM,CAAC,GAAG,IAAA,gBAAW,EAAC,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC;QAChD,OAAO,UAAU,CAAC;YAChB,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAClB,OAAO,YAAY,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEL,IAAI;SACD,MAAM,CAAC,MAAM,CAAC;SACd,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC;SAC7B,IAAI,CACH,UAAC,CAAmB,IAAK,OAAA,UAAG,IAAA,4BAAmB,EAAC,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAG,EAA9C,CAA8C,CACxE,CAAC,aAAa;SACd,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,cAAc;SACpC,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,aAAa;SACxC,IAAI,CAAC,WAAW,EAAE,UAAC,CAAC;QACb,IAAA,KAAS,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAhC,CAAC,QAAA,EAAE,CAAC,QAA4B,CAAC;QACxC,OAAO,oBAAa,CAAC,eAAK,CAAC,MAAG,CAAC;IACjC,CAAC,CAAC;SACD,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;SACrB,UAAU,EAAE;SACZ,QAAQ,CAAC,GAAG,CAAC;SACb,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;IAE9B,mBAAmB;IACnB,GAAG;SACA,MAAM,CAAC,QAAQ,CAAC;SAChB,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;SACb,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;SACb,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,sCAAsC;SACrD,IAAI,CAAC,MAAM,EAAE,aAAa,CAAC;SAC3B,UAAU,EAAE;SACZ,QAAQ,CAAC,GAAG,CAAC;SACb,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC;AAEF,kBAAe,SAAS,CAAC","names":[],"sources":["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/DonutChart/drawChart.ts"],"sourcesContent":["import { select, arc, interpolate, pie } from \"d3\";\nimport { totalDonutValue, calculatePercentage } from \"util/helper\";\nimport { TGenericDataType, GenericTableData } from \"types\";\nimport { colors } from \"util/constants\";\nimport { DType, DataType } from \"./types\";\n\nconst drawChart = (element: string, data: GenericTableData[]) => {\n  const total = totalDonutValue(data);\n  const boxSize = 500;\n\n  select(element).select(\"svg\").remove();\n  const svg = select(element)\n    .append(\"svg\")\n    .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n    .attr(\"height\", \"100%\")\n    .attr(\"width\", \"100%\")\n    .attr(\"viewBox\", `0 0 ${boxSize} ${boxSize}`)\n    .append(\"g\")\n    .attr(\"transform\", `translate(${boxSize / 2}, ${boxSize / 2})`);\n\n  const arcGenerator: TGenericDataType = arc()\n    .padAngle(0.02)\n    .innerRadius(100)\n    .outerRadius(250);\n\n  const pieGenerator = pie()\n    .startAngle(-0.75 * Math.PI)\n    .value((d: TGenericDataType) => d.value);\n\n  const arcs = svg\n    .selectAll()\n    .data(pieGenerator(data as unknown as DataType))\n    .enter();\n  arcs\n    .append(\"path\")\n    .attr(\"d\", arcGenerator)\n    .style(\"fill\", (d, i) => colors[i % data.length])\n    .transition()\n    .duration(700)\n    .attrTween(\"d\", function (d: DType) {\n      const i = interpolate(d.startAngle, d.endAngle);\n      return function (t) {\n        d.endAngle = i(t);\n        return arcGenerator(d);\n      };\n    });\n\n  arcs\n    .append(\"text\")\n    .attr(\"text-anchor\", \"middle\")\n    .text(\n      (d: TGenericDataType) => `${calculatePercentage(total, d.data.value)}%`\n    ) // label text\n    .style(\"fill\", \"#fff\") // label color\n    .style(\"font-size\", \"30px\") // label size\n    .attr(\"transform\", (d) => {\n      const [x, y] = arcGenerator.centroid(d);\n      return `translate(${x}, ${y})`;\n    })\n    .style(\"font-size\", 0)\n    .transition()\n    .duration(700)\n    .style(\"font-size\", \"26px\");\n\n  // Add inner border\n  svg\n    .append(\"circle\")\n    .attr(\"cx\", 0)\n    .attr(\"cy\", 0)\n    .attr(\"r\", 100) // should be same as innerRadius value\n    .attr(\"fill\", \"transparent\")\n    .transition()\n    .duration(700)\n    .attr(\"stroke-width\", 8);\n};\n\nexport default drawChart;\n"],"version":3}