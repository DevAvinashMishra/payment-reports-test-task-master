{"version":3,"mappingswC;AAAA;AAExCA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAA0C;AAAA;AAM1C,IAAMC,WAAW,GAAG,UAACC,EAAgC;EAAA;EAAA;MAA9BC;IAAA;IAAA,kCAAS;IAATC,IAAI;IAAA;IAAA;IAAA;IAAA,8BAAG,EAAE;IAAA;IAAA;EAAA;EAAA;EAC9B,OACE;IAAAC,UACE,uBAACC,wBAAc;MAACC,SAAS,EAAEC;IAAK;MAAAH,UAC9B,wBAACI,eAAK;QAAA,cAAY;MAAkB;QAAAJ,WAClC,uBAACK,mBAAS;UAAAL,UACR,uBAACM,kBAAQ;YAAAN;YACN;YAAA,kCAAI;YAAA;YAAA,8BACHD,IAAI,CAACQ,MAAM,GAAG,CAAC;YAAA;YAAA,8BACfR,IAAI,CAAC,CAAC,CAAC,CAACS,IAAI,CAACC,GAAG,CAAC,UAACC,GAAG;cAAA;cAAA;cAAA;cAAK,OACxB,uBAACC,mBAAe;gBAAAX,UACbU,GAAG,CAACE;cAAK,GADU,UAAGF,GAAG,CAACE,KAAK,CAAE,CAElB;YAHM,CAIzB,CAAC;UAAA;QACK,UACD,EACZ,uBAACC,mBAAS;UAAAb,UACPD,IAAI,CAACU,GAAG,CAAC,UAACZ,EAAkC;YAAA;YAAA;gBAAhCiB,SAAS;cAAA;cAAA;cAAEhB;cAAA;cAAA,kCAAS;cAATU,IAAI;cAAA;cAAA;cAAA;cAAA,8BAAG,EAAE;cAAA;cAAA;YAAA;YAAA;YAAiB,OAChD,uBAACO,kBAAc;cAAAf,UACZQ,IAAI,CAACC,GAAG,CAAC,UAACO,IAAI;gBAAA;gBAAA;gBAAA;gBAAK,OAClB,uBAACL,mBAAe;kBAEdT,SAAS,EAAC,IAAI;kBACde,KAAK,EAAC;gBAAK;kBAAAjB,UAEVgB,IAAI,CAACE;gBAAK,IAJN,UAAGJ,SAAS,cAAIE,IAAI,CAACE,KAAK,CAAE,CAKjB;cAPA,CAQnB;YAAC,GATiBJ,SAAS,CAUb;UAX+B,CAYjD;QAAC,UACQ;MAAA;IACN;EACO,UAChB;AAEP,CAAC;AAAC;AAAA;AACFK,kBAAeC,KAAK,CAACC,IAAI,CAACzB,WAAW,CAAC","names":["require","SimpleTable","_a","_b","rows","children","TableContainer_1","component","Paper_1","Table_1","TableHead_1","TableRow_1","length","data","map","row","tableCell_1","label","TableBody_1","paymentId","tableRow_1","item","scope","value","exports","React","memo"],"sources":["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/components/SimpleTable/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport { RowsType } from \"types\"; \nimport \"./style.css\";\nimport StyledTableRow from \"./tableRow\";\nimport StyledTableCell from \"./tableCell\";\n\ntype TSimpleTableProps = {\n  rows: RowsType[];\n};\n\nconst SimpleTable = ({ rows = [] }: TSimpleTableProps) => {\n  return (\n    <>\n      <TableContainer component={Paper}>\n        <Table aria-label=\"customized table\">\n          <TableHead>\n            <TableRow>\n              {rows &&\n                rows.length > 0 &&\n                rows[0].data.map((row) => (\n                  <StyledTableCell key={`${row.label}`}>\n                    {row.label}\n                  </StyledTableCell>\n                ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map(({ paymentId, data = [] }: RowsType) => (\n              <StyledTableRow key={paymentId}>\n                {data.map((item) => (\n                  <StyledTableCell\n                    key={`${paymentId}-${item.value}`}\n                    component=\"th\"\n                    scope=\"row\"\n                  >\n                    {item.value}\n                  </StyledTableCell>\n                ))}\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n};\nexport default React.memo(SimpleTable);\n"]}