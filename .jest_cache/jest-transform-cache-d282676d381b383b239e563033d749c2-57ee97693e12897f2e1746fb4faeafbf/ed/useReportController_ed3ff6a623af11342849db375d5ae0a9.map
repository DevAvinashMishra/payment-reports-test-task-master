{"version":3,"mappingsmBA;AAAA;AAAA;AAAwC;AAAA;AAExC,IAAMA,mBAAmB,GAAG;EAAA;EAAA;EACpB;IAAA;IAAA,0BAAgC,oBAAQ,EAAC,IAAI,CAAC;IAA7CC,WAAW;IAAA;IAAA;IAAEC,cAAc;IAAA;IAAA,+BAAkB;EAC9C;IAAA;IAAA,0BAAgC,oBAAQ,EAAC,IAAI,CAAC;IAA7CC,WAAW;IAAA;IAAA;IAAEC,cAAc;IAAA;IAAA,+BAAkB;EAC9C;IAAA;IAAA,0BAAkC,oBAAQ,EAAC,IAAI,CAAC;IAA/CC,YAAY;IAAA;IAAA;IAAEC,eAAe;IAAA;IAAA,+BAAkB;EAChD;IAAA;IAAA,0BAAkC,oBAAQ,EAAC,IAAI,CAAC;IAA/CC,YAAY;IAAA;IAAA;IAAEC,eAAe;IAAA;IAAA,+BAAkB;EAChD;IAAA;IAAA,0BAAoC,oBAAQ,EAAC,IAAI,CAAC;IAAjDC,aAAa;IAAA;IAAA;IAAEC,gBAAgB;IAAA;IAAA,+BAAkB;EAClD;IAAA;IAAA,0BAAgC,oBAAQ,EAAC,IAAI,CAAC;IAA7CC,WAAW;IAAA;IAAA;IAAEC,cAAc;IAAA;IAAA,+BAAkB;EAC9C;IAAA;IAAA,0BAA4C,oBAAQ,EAAgB,EAAE,CAAC;IAAtEC,iBAAiB;IAAA;IAAA;IAAEC,oBAAoB;IAAA;IAAA,+BAA+B;EACvE;IAAA;IAAA,0BAA4C,oBAAQ,EAAgB,EAAE,CAAC;IAAtEC,iBAAiB;IAAA;IAAA;IAAEC,oBAAoB;IAAA;IAAA,+BAA+B;EACvE;IAAA;IAAA,0BAAoC,oBAAQ,EAAmB,EAAE,CAAC;IAAjEC,aAAa;IAAA;IAAA;IAAEC,gBAAgB;IAAA;IAAA,+BAAkC;EAClE;IAAA;IAAA,0BAA8B,oBAAQ,EAAqB,EAAE,CAAC;IAA7DC,UAAU;IAAA;IAAA;IAAEC,aAAa;IAAA;IAAA,+BAAoC;EAC9D;IAAA;IAAA,0BAA4B,oBAAQ,EACxC,UAAGC,kBAAM,CAACC,YAAY,gBAAMD,kBAAM,CAACE,YAAY,CAAE,CAClD;IAFMC,SAAS;IAAA;IAAA;IAAEC,YAAY;IAAA;IAAA,+BAE7B;EACK;IAAA;IAAA,0BAA8B,oBAAQ,EAAS,CAAC,CAAC;IAAhDC,UAAU;IAAA;IAAA;IAAEC,aAAa;IAAA;IAAA,+BAAuB;EACjD;IAAA;IAAA,0BAI4B,sBAAU,EAACC,gBAAS,CAAC;IAHrDC,SAAS;IAAA;IAAA;IACJC,QAAQ;IAAA;IAAA;IACFC,aAAa;IAAA;IAAA,sCAC6B;EACjD;IAAA;IAAA,0BAI4B,sBAAU,EAACH,gBAAS,CAAC;IAH1CI,cAAc;IAAA;IAAA;IACpBC,WAAW;IAAA;IAAA;IACLC,aAAa;IAAA;IAAA,sCAC6B;EAEjD;IAAA;IAAA,0BACJ,sBAAU,EAACN,wBAAiB,CAAC;IADlBO,SAAS;IAAA;IAAA;IAAaC,cAAc;IAAA;IAAA,sCAClB;EAAC;EAAA;EAEhC,qBAAS,EAAC;IAAA;IAAA;IAAA;IACRL,aAAa,EAAE;IAAC;IAAA;IAChBG,aAAa,EAAE;IAAC;IAAA;IAChBE,cAAc,CAAC;MACbC,IAAI,EAAE,EAAE;MACRC,EAAE,EAAE,EAAE;MACNC,SAAS,EAAE,EAAE;MACbC,SAAS,EAAE;KACZ,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAAC;EAAA;EAEP,qBAAS,EAAC;IAAA;IAAA;IAAA;IACR,IAAIV,QAAQ,CAACW,IAAI,KAAKC,SAAS,EAAE;MAAA;MAAA;MAAA;MAC/B1B,oBAAoB,CACjBc,QAAQ,CAACW,IAAqB,CAACE,GAAG,CAAC,UAACC,EAAmB;QAAA;QAAA;YAAjBL,SAAS;UAAA;UAAA;UAAEM,IAAI;UAAA;UAAA;QAAA;QAAA;QAAO,OAAC;UAC5DC,EAAE,EAAEP,SAAS;UACbM,IAAI,EAAEA,IAAI;UACVE,IAAI,EAAE,UAAG1B,kBAAM,CAAC2B,OAAO;SACxB;MAJ4D,CAI3D,CAAC,CACJ;KACF;IAAA;IAAA;MAAA;IAAA;EACH,CAAC,EAAE,CAAClB,QAAQ,CAACW,IAAI,CAAC,CAAC;EAAC;EAAA;EAEpB,qBAAS,EAAC;IAAA;IAAA;IAAA;IACR,IAAIR,WAAW,CAACQ,IAAI,KAAKC,SAAS,EAAE;MAAA;MAAA;MAAA;MAClC5B,oBAAoB,CAClBmB,WAAW,CAACQ,IAAI,CAACE,GAAG,CAAC,UAACC,EAAoC;QAAA;QAAA;YAAlCJ,SAAS;UAAA;UAAA;UAAEK,IAAI;UAAA;UAAA;QAAA;QAAA;QAAwB,OAAC;UAC9DC,EAAE,EAAEN,SAAS;UACbK,IAAI,EAAEA,IAAI;UACVE,IAAI,EAAE,UAAG1B,kBAAM,CAAC4B,OAAO;SACxB;MAJ8D,CAI7D,CAAC,CACJ;KACF;IAAA;IAAA;MAAA;IAAA;EACH,CAAC,EAAE,CAAChB,WAAW,CAACQ,IAAI,CAAC,CAAC;EAAC;EAAA;EAEvB,IAAMS,eAAe,GAAG,UACtBjD,WAA0B,EAC1BE,WAA0B;IAAA;IAAA;IAAA;IAE1B;IAAI;IAAA,uCAAW,KAAK,IAAI;IAAA;IAAA,4BAAIA,WAAW,KAAK,IAAI,GAC9C;MAAA;MAAA;MAAA;MAAAsB,YAAY,CAAC,UAAGJ,kBAAM,CAACC,YAAY,gBAAMD,kBAAM,CAACE,YAAY,CAAE,CAAC;IAAA,CAAC,MAC7D;MAAA;MAAA;MAAA;MAAA;MAAI;MAAA,uCAAW,KAAK,IAAI;MAAA;MAAA,4BAAIpB,WAAW,KAAK,IAAI,GACnD;QAAA;QAAA;QAAA;QAAAsB,YAAY,CAAC,UAAGJ,kBAAM,CAACC,YAAY,iBAAO6B,UAAU,CAAChD,WAAW,CAAC,CAAE,CAAC;MAAA,CAAC,MAClE;QAAA;QAAA;QAAA;QAAA;QAAI;QAAA,wCAAW,KAAK,IAAI;QAAA;QAAA,6BAAIA,WAAW,KAAK,IAAI,GACnD;UAAA;UAAA;UAAA;UAAAsB,YAAY,CAAC,WAAI0B,UAAU,CAAClD,WAAW,CAAC,gBAAMoB,kBAAM,CAACE,YAAY,CAAE,CAAC;QAAA,CAAC,MAClE;UAAA;UAAA;UAAA;UAAA;UAAI;UAAA,wCAAW,KAAK,IAAI;UAAA;UAAA,6BAAIpB,WAAW,KAAK,IAAI,GACnD;YAAA;YAAA;YAAA;YAAAsB,YAAY,CAAC,WAAI0B,UAAU,CAAClD,WAAW,CAAC,iBAAOkD,UAAU,CAAChD,WAAW,CAAC,CAAE,CAAC;UAAA,CAAC,MACvE;YAAA;YAAA;YAAA;YAAAsB,YAAY,CAAC,WAAIxB,WAAW,iBAAOE,WAAW,CAAE,CAAC;UAAA;QAAA;MAAA;IAAA;EACxD,CAAC;EAAC;EAAA;EAEF,IAAMiD,YAAY,GAAG;IAAA;IAAA;IAAA;IACnBlD,cAAc,CAACG,YAAY,CAAC;IAAC;IAAA;IAC7BD,cAAc,CAACG,YAAY,CAAC;IAAC;IAAA;IAC7B6B,cAAc,CAAC;MACbC,IAAI,EACF5B,aAAa,KAAK,IAAI;MAAA;MAAA,6BAClB,EAAE;MAAA;MAAA,6BACF,oBAAM,EAACA,aAAa,CAAC,CAAC4C,MAAM,CAAC,YAAY,CAAC;MAChDf,EAAE,EAAE3B,WAAW,KAAK,IAAI;MAAA;MAAA,6BAAG,EAAE;MAAA;MAAA,6BAAG,oBAAM,EAACA,WAAW,CAAC,CAAC0C,MAAM,CAAC,YAAY,CAAC;MACxEd,SAAS,EAAElC,YAAY,KAAK,IAAI;MAAA;MAAA,6BAAG,EAAE;MAAA;MAAA,6BAAGA,YAAY;MACpDmC,SAAS,EAAEjC,YAAY,KAAK,IAAI;MAAA;MAAA,6BAAG,EAAE;MAAA;MAAA,6BAAGA,YAAY;KACrD,CAAC;IAAC;IAAA;IACH2C,eAAe,CAAC7C,YAAY,EAAEE,YAAY,CAAC;EAC7C,CAAC;EAED,IAAM+C,cAAc;EAAA;EAAA,0BAAG,mBAAO,EAAC;IAAA;IAAA;IAAA;IAC7B;IACG;IAAA,wCAAW,KAAK,IAAI;IAAA;IAAA,6BAAInD,WAAW,KAAK,IAAI;IAC5C;IAAA,wCAAW,KAAK,IAAI;IAAA;IAAA,6BAAIA,WAAW,KAAK,IAAI,CAAC,EAE9C;MAAA;MAAA;MAAA;MAAA,OAAO,KAAK;IAAA,CAAC;IAAA;IAAA;MAAA;IAAA;IAAA;IACf,OAAO,IAAI;EACb,CAAC,EAAE,CAACF,WAAW,EAAEE,WAAW,CAAC,CAAC;EAE9B,IAAMgD,UAAU;EAAA;EAAA,0BAAG,uBAAW,EAC5B,UAACL,EAAU;IAAA;IAAA;IACT,IAAIS,aAAa;IAAA;IAAA,0BAAkB,EAAE;IAAC;IAAA;IACtC,IAAIxC,iBAAiB,EAAE;MAAA;MAAA;MAAA;MACrBwC,aAAa,GAAGxC,iBAAiB,CAACyC,MAAM,CAAC3C,iBAAiB,CAAC;KAC5D;IAAA;IAAA;MAAA;IAAA;IAAA;IACD,IAAI0C,aAAa,EAAE;MAAA;MAAA;MACjB,IAAME,QAAQ;MAAA;MAAA,0BAAGF,aAAa,CAACG,IAAI,CAAC,UAACC,CAAc;QAAA;QAAA;QAAA;QAAK,QAAC,CAACb,EAAE,KAAKA,EAAE;MAAX,CAAW,CAAC;MAAC;MAAA;MACrE,OAAO;QAAA;QAAA,qCAAQ;QAAA;QAAA,6BAARW,QAAQ;QAAA;QAAA;QAAA;QAAA,6BAARA,QAAQ,CAAEZ,IAAI;MAAA;KACtB;IAAA;IAAA;MAAA;IAAA;EACH,CAAC,EACD,CAAChC,iBAAiB,EAAEE,iBAAiB,CAAC,CACvC;EAED,IAAM6C,gBAAgB;EAAA;EAAA,2BAAG,uBAAW,EAClC,UAACC,QAAgD;IAAA;IAAA;IAAA;IAC/C,IAAI9C,iBAAiB,EAAE;MAAA;MAAA;MACrB,IAAI+C,QAAM;MAAA;MAAA,2BAAG,CAAC;MACd,IAAMC,cAAc;MAAA;MAAA,2BAAGC,KAAK,CAAC3B,IAAI,CAC/B,IAAI4B,GAAG,CACLJ,QAAQ,CAACpB,IAAI,CAACE,GAAG,CAAC,UAACC,EAAuC;QAAA;QAAA;YAArCL,SAAS;UAAA;UAAA;UAAEpC,WAAW;UAAA;UAAA;QAAA;QAAA;QACzC,mBAAY,KAAKoC,SAAS;QAAA;QAAA,6BAAGpC,WAAW;QAAA;QAAA,6BAAGoC,SAAS;MAApD,CAAoD,CACrD,CACF,CACF,CAACI,GAAG,CAAC,UAACF,IAAY;QAAA;QAAA;QACjB,IAAMyB,KAAK;QAAA;QAAA,2BAAGL,QAAQ,CAACpB,IAAI,CAAC0B,MAAM,CAChC,UAACvB,EAAuC;UAAA;UAAA;cAArCL,SAAS;YAAA;YAAA;YAAEpC,WAAW;YAAA;YAAA;UAAA;UAAA;UACvB;YAAA;YAAA,sCAAS,KAAKsC,IAAI;YAAA;YAAA,6BAAItC,WAAW,KAAKsC,IAAI;UAAA;QAA1C,CAA0C,CAC7C;QACD,IAAM2B,KAAK;QAAA;QAAA,2BAAG,4BAAe,EAACF,KAAmB,CAAC;QAAC;QAAA;QACnDJ,QAAM,IAAIO,QAAQ,CAACD,KAAK,EAAE,EAAE,CAAC;QAAC;QAAA;QAC9B,OAAO;UACLE,WAAW;UAAE;UAAA,uCAAU,CAAC7B,IAAI,CAAC;UAAA;UAAA,6BAAI,EAAE;UACnCA,IAAI,EAAEyB,KAAmB;UACzBE,KAAK;SACN;MACH,CAAC,CAAC;MAAC;MAAA;MACHlD,gBAAgB,CAAC,qBAAO,EAAC6C,cAAc,CAAC,CAAC;MAAC;MAAA;MAC1CpC,aAAa,CAACmC,QAAM,CAAC;KACtB;IAAA;IAAA;MAAA;IAAA;EACH,CAAC,EACD,CAAC/C,iBAAiB,EAAEZ,WAAW,EAAEgD,UAAU,EAAElD,WAAW,CAAC,CAC1D;EAAC;EAAA;EAEF,qBAAS,EAAC;IAAA;IAAA;IAAA;IACR,IAAIkC,SAAS,CAACM,IAAI,KAAKC,SAAS,EAAE;MAAA;MAAA;MAChC,IAAI6B,OAAK;MAAA;MAAA,2BAAG,CAAC;MACb,IAAMC,kBAAkB;MAAA;MAAA,2BAAIrC,SAAS,CAACM,IAAgB,CAACE,GAAG,CACxD,UAACC,EAMiB;QAAA;QAAA;YALhB6B,MAAM;UAAA;UAAA;UACNlC,SAAS;UAAA;UAAA;UACTC,SAAS;UAAA;UAAA;UACTkC,OAAO;UAAA;UAAA;UACPC,SAAS;UAAA;UAAA;QAAA;QAAA;QAETJ,OAAK,IAAIE,MAAM;QAAC;QAAA;QAChB,OAAO;UACLE,SAAS;UACTpC,SAAS;UACTpC,WAAW,EAAEqC,SAAS;UACtBC,IAAI,EAAE,CACJ;YAAEmC,KAAK,EAAE,MAAM;YAAEC,KAAK,EAAE,oBAAM,EAACH,OAAO,CAAC,CAACrB,MAAM,CAAC,YAAY;UAAC,CAAE,EAC9D;YAAEuB,KAAK,EAAE,SAAS;YAAEC,KAAK,EAAE1B,UAAU,CAACX,SAAS;UAAC,CAAE,EAClD;YAAEoC,KAAK,EAAE,gBAAgB;YAAEC,KAAK,EAAEF;UAAS,CAAE,EAC7C;YAAEC,KAAK,EAAE,QAAQ;YAAEC,KAAK,EAAEJ;UAAM,CAAE;SAErC;MACH,CAAC,CACF;MAAC;MAAA;MACFb,gBAAgB,CAAC;QAAEnB,IAAI,EAAE+B,kBAAkB;QAAEJ,KAAK;MAAA,CAAE,CAAC;KACtD;IAAA;IAAA;MAAA;IAAA;EACH,CAAC,EAAE,CAACR,gBAAgB,EAAET,UAAU,EAAEhB,SAAS,CAAC,CAAC;EAAC;EAAA;EAE9C,qBAAS,EAAC;IAAA;IAAA;IAAA;IACR,IAAIlB,aAAa,EAAE;MAAA;MAAA;MACjB,IAAM6D,KAAK;MAAA;MAAA,2BAAG7D,aAAa,CAAC0B,GAAG,CAAC,UAACoC,IAAc;QAAA;QAAA;QAAA;QAAK,OAAC;UACnDH,KAAK,EAAEG,IAAI,CAACT,WAAW;UACvBO,KAAK,EAAE,4BAAe,EAACE,IAAI,CAACtC,IAAI;SACjC;MAHmD,CAGlD,CAAC;MAAC;MAAA;MACJrB,aAAa,CAAC0D,KAAK,CAAC;KACrB;IAAA;IAAA;MAAA;IAAA;EACH,CAAC,EAAE,CAAC7D,aAAa,CAAC,CAAC;EAAC;EAAA;EAEpB,IAAM+D,aAAa,GAAG,UAACC,MAAmB;IAAA;IAAA;IAAA;IACxC,sBAAe,CAACA,MAAgC,CAAC;EAAjD,CAAiD;EAAC;EAAA;EAEpD,IAAMC,aAAa,GAAG,UAACD,MAAmB;IAAA;IAAA;IAAA;IACxC,sBAAe,CAACA,MAAgC,CAAC;EAAjD,CAAiD;EAAC;EAAA;EAEpD,IAAME,cAAc,GAAG,UAACF,MAAmB;IAAA;IAAA;IAAA;IACzC,uBAAgB,CAACA,MAAgC,CAAC;EAAlD,CAAkD;EAAC;EAAA;EAErD,IAAMG,YAAY,GAAG,UAACH,MAAmB;IAAA;IAAA;IAAA;IACvC,qBAAc,CAACA,MAAgC,CAAC;EAAhD,CAAgD;EAAC;EAAA;EAEnD,OAAO;IACLpD,SAAS;IACT5B,WAAW;IACXE,WAAW;IACXY,iBAAiB;IACjBV,YAAY;IACZ2B,cAAc;IACdnB,iBAAiB;IACjBN,YAAY;IACZ+C,cAAc;IACd9B,SAAS;IACTP,aAAa;IACbS,UAAU;IACVP,UAAU;IACV+D,aAAa;IACbC,cAAc;IACdC,YAAY;IACZhC,YAAY;IACZD,UAAU;IACV6B,aAAa;GACd;AACH,CAAC;AAAC;AAAA;AAEFK,kBAAerF,mBAAmB","names":["useReportController","projectData","setProjectData","gatewayData","setGatewayData","projectValue","setProjectValue","gateWayValue","setGateWayValue","fromDateValue","setFromDateValue","toDateValue","setToDateValue","formatGatewayData","setFormatGatewayData","formatProjectData","setFormatProjectData","accordionData","setAccordionData","donutChart","setDonutChart","constants_1","ALL_PROJECTS","ALL_GATEWAYS","tableHead","setTableHead","grandTotal","setGrandTotal","apis_1","isLoading","projData","fetchProjects","gatewayLoading","dataGateway","fetchGateways","tableData","fetchTableData","from","to","projectId","gatewayId","data","undefined","map","_a","name","id","type","PROJECT","GATEWAY","headerProcessor","handleName","handleReport","format","displayGateway","formattedData","concat","nameData","find","e","handleDataFormat","baseData","gTotal_1","accordionCData","Array","Set","datas","filter","total","parseInt","projectName","total_1","formattedTableData","amount","created","paymentId","label","value","donut","item","selectProject","target","selectGateway","selectFromDate","selectToDate","exports"],"sources":["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/page/Report/useReportController.tsx"],"sourcesContent":["import { useState, useEffect, useMemo, useCallback } from \"react\";\nimport moment from \"moment\";\nimport reverse from \"lodash/reverse\";\nimport useAsyncFn from \"hooks/useAsync\";\nimport { totalsGenerator } from \"util/helper\";\nimport { fetchDetailedData, fetchProj, fetchGate } from \"util/apis\";\nimport {\n  GenericTableData,\n  RowsType,\n  TDateTarget,\n  TDateTargetStateAction,\n  TReport,\n  TProjectData,\n  TGatewayData,\n} from \"types\";\nimport { ItemType } from \"./type\";\nimport {\n  GatewayDataType,\n  ProjectAPIType,\n  TableFormatType,\n  TDataFormat,\n  TAccordionData,\n  TFormatData,\n} from \"./type\";\nimport { report } from \"util/constants\";\n\nconst useReportController = () => {\n  const [projectData, setProjectData] = useState(null);\n  const [gatewayData, setGatewayData] = useState(null);\n  const [projectValue, setProjectValue] = useState(null);\n  const [gateWayValue, setGateWayValue] = useState(null);\n  const [fromDateValue, setFromDateValue] = useState(null);\n  const [toDateValue, setToDateValue] = useState(null);\n  const [formatGatewayData, setFormatGatewayData] = useState<TDataFormat[]>([]);\n  const [formatProjectData, setFormatProjectData] = useState<TDataFormat[]>([]);\n  const [accordionData, setAccordionData] = useState<TAccordionData[]>([]);\n  const [donutChart, setDonutChart] = useState<GenericTableData[]>([]);\n  const [tableHead, setTableHead] = useState<string>(\n    `${report.ALL_PROJECTS} | ${report.ALL_GATEWAYS}`\n  );\n  const [grandTotal, setGrandTotal] = useState<number>(0);\n  const {\n    isLoading,\n    res: projData,\n    asyncFunc: fetchProjects,\n  }: ProjectAPIType<TProjectData> = useAsyncFn(fetchProj);\n  const {\n    isLoading: gatewayLoading,\n    res: dataGateway,\n    asyncFunc: fetchGateways,\n  }: ProjectAPIType<TGatewayData> = useAsyncFn(fetchGate);\n\n  const { res: tableData, asyncFunc: fetchTableData }: ProjectAPIType<TReport> =\n    useAsyncFn(fetchDetailedData);\n\n  useEffect(() => {\n    fetchProjects();\n    fetchGateways();\n    fetchTableData({\n      from: \"\",\n      to: \"\",\n      projectId: \"\",\n      gatewayId: \"\",\n    });\n  }, []);\n\n  useEffect(() => {\n    if (projData.data !== undefined) {\n      setFormatProjectData(\n        (projData.data as TProjectData).map(({ projectId, name }) => ({\n          id: projectId,\n          name: name,\n          type: `${report.PROJECT}`,\n        }))\n      );\n    }\n  }, [projData.data]);\n\n  useEffect(() => {\n    if (dataGateway.data !== undefined) {\n      setFormatGatewayData(\n        dataGateway.data.map(({ gatewayId, name }: GatewayDataType) => ({\n          id: gatewayId,\n          name: name,\n          type: `${report.GATEWAY}`,\n        }))\n      );\n    }\n  }, [dataGateway.data]);\n\n  const headerProcessor = (\n    projectData: string | null,\n    gatewayData: string | null\n  ) => {\n    if (projectData === null && gatewayData === null)\n      setTableHead(`${report.ALL_PROJECTS} | ${report.ALL_GATEWAYS}`);\n    else if (projectData === null && gatewayData !== null)\n      setTableHead(`${report.ALL_PROJECTS} |  ${handleName(gatewayData)}`);\n    else if (projectData !== null && gatewayData === null)\n      setTableHead(` ${handleName(projectData)} | ${report.ALL_GATEWAYS}`);\n    else if (projectData !== null && gatewayData !== null)\n      setTableHead(` ${handleName(projectData)} |  ${handleName(gatewayData)}`);\n    else setTableHead(` ${projectData} |  ${gatewayData}`);\n  };\n\n  const handleReport = () => {\n    setProjectData(projectValue);\n    setGatewayData(gateWayValue);\n    fetchTableData({\n      from:\n        fromDateValue === null\n          ? \"\"\n          : moment(fromDateValue).format(\"YYYY-MM-DD\"),\n      to: toDateValue === null ? \"\" : moment(toDateValue).format(\"YYYY-MM-DD\"),\n      projectId: projectValue === null ? \"\" : projectValue,\n      gatewayId: gateWayValue === null ? \"\" : gateWayValue,\n    });\n    headerProcessor(projectValue, gateWayValue);\n  };\n\n  const displayGateway = useMemo(() => {\n    if (\n      (projectData !== null && gatewayData !== null) ||\n      (projectData === null && gatewayData === null)\n    )\n      return false;\n    return true;\n  }, [projectData, gatewayData]);\n\n  const handleName = useCallback(\n    (id: string) => {\n      let formattedData: TDataFormat[] = [];\n      if (formatProjectData) {\n        formattedData = formatProjectData.concat(formatGatewayData);\n      }\n      if (formattedData) {\n        const nameData = formattedData.find((e: TDataFormat) => e.id === id);\n        return nameData?.name;\n      }\n    },\n    [formatGatewayData, formatProjectData]\n  );\n\n  const handleDataFormat = useCallback(\n    (baseData: { data: TFormatData[]; total: number }) => {\n      if (formatProjectData) {\n        let gTotal = 0;\n        const accordionCData = Array.from(\n          new Set(\n            baseData.data.map(({ projectId, gatewayData }: TFormatData) =>\n              projectValue === projectId ? gatewayData : projectId\n            )\n          )\n        ).map((data: string) => {\n          const datas = baseData.data.filter(\n            ({ projectId, gatewayData }: TFormatData) =>\n              projectId === data || gatewayData === data\n          );\n          const total = totalsGenerator(datas as RowsType[]);\n          gTotal += parseInt(total, 10);\n          return {\n            projectName: handleName(data) || \"\",\n            data: datas as RowsType[],\n            total,\n          };\n        });\n        setAccordionData(reverse(accordionCData));\n        setGrandTotal(gTotal);\n      }\n    },\n    [formatProjectData, gatewayData, handleName, projectData]\n  );\n\n  useEffect(() => {\n    if (tableData.data !== undefined) {\n      let total = 0;\n      const formattedTableData = (tableData.data as TReport).map(\n        ({\n          amount,\n          projectId,\n          gatewayId,\n          created,\n          paymentId,\n        }: TableFormatType) => {\n          total += amount;\n          return {\n            paymentId,\n            projectId,\n            gatewayData: gatewayId,\n            data: [\n              { label: \"Date\", value: moment(created).format(\"MM/DD/YYYY\") },\n              { label: \"Gateway\", value: handleName(gatewayId) },\n              { label: \"Transaction ID\", value: paymentId },\n              { label: \"Amount\", value: amount },\n            ],\n          };\n        }\n      );\n      handleDataFormat({ data: formattedTableData, total });\n    }\n  }, [handleDataFormat, handleName, tableData]);\n\n  useEffect(() => {\n    if (accordionData) {\n      const donut = accordionData.map((item: ItemType) => ({\n        label: item.projectName,\n        value: totalsGenerator(item.data),\n      }));\n      setDonutChart(donut);\n    }\n  }, [accordionData]);\n\n  const selectProject = (target: TDateTarget) =>\n    setProjectValue(target as TDateTargetStateAction);\n\n  const selectGateway = (target: TDateTarget) =>\n    setGateWayValue(target as TDateTargetStateAction);\n\n  const selectFromDate = (target: TDateTarget) =>\n    setFromDateValue(target as TDateTargetStateAction);\n\n  const selectToDate = (target: TDateTarget) =>\n    setToDateValue(target as TDateTargetStateAction);\n\n  return {\n    isLoading,\n    projectData,\n    gatewayData,\n    formatProjectData,\n    projectValue,\n    gatewayLoading,\n    formatGatewayData,\n    gateWayValue,\n    displayGateway,\n    tableHead,\n    accordionData,\n    grandTotal,\n    donutChart,\n    selectGateway,\n    selectFromDate,\n    selectToDate,\n    handleReport,\n    handleName,\n    selectProject,\n  };\n};\n\nexport default useReportController;\n"]}