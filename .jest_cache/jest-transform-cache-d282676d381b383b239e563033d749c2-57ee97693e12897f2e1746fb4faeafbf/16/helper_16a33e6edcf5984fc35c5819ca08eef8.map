{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAaS;IAAA;MAAA;IAAA;EAAA;EAAA;AAAA;AAAA;AAAA;;;;;;;;;AAXF,IAAMA,eAAe,GAAG,UAACC,IAAgB;EAAA;EAAA;EAC9C,IAAIC,KAAK;EAAA;EAAA,0BAAG,CAAC;EAAC;EAAA;EACdD,IAAI,CAACE,OAAO,CAAC,UAACC,GAAG;IAAA;IAAA;IAAA;IACf,UAAG,CAACC,IAAI,CAACF,OAAO,CAAC,UAACG,IAAsB;MAAA;MAAA;MAAA;MACtC,IAAIA,IAAI,CAACC,KAAK,KAAK,QAAQ,EAAE;QAAA;QAAA;QAAA;QAAAL,KAAK,IAAIM,QAAQ,CAACF,IAAI,CAACG,KAAK,EAAE,EAAE,CAAC;MAAA,CAAC;MAAA;MAAA;QAAA;MAAA;IACjE,CAAC,CAAC;EAFF,CAEE,CACH;EAAC;EAAA;EACF,OAAOP,KAAK,CAACQ,OAAO,CAAC,CAAC,CAAC;AACzB,CAAC;AAAC;AAAA;AARWC,uBAAe;AAQ1B;AAAA;AAEK,IAAMC,eAAe,GAAG,UAACP,IAAwB;EAAA;EAAA;EACtD,IAAIQ,GAAG;EAAA;EAAA,2BAAG,CAAC;EAAC;EAAA;EACZ,KAAK,IAAIC,CAAC;EAAA;EAAA,2BAAG,CAAC,GAAEA,CAAC,GAAGT,IAAI,CAACU,MAAM,EAAED,CAAC,EAAE,EAAE;IAAA;IAAA;IACpCD,GAAG,IAAIL,QAAQ,CAACH,IAAI,CAACS,CAAC,CAAC,CAACL,KAAK,EAAE,EAAE,CAAC;;EACnC;EAAA;EACD,OAAOI,GAAG;AACZ,CAAC;AAAC;AAAA;AANWF,uBAAe;AAM1B;AAAA;AACK,IAAMK,mBAAmB,GAAG,UAACd,KAAa,EAAEO,KAAa;EAAA;EAAA;EAC9D,IAAMQ,GAAG;EAAA;EAAA,2BAAIR,KAAK,GAAGP,KAAK,GAAI,GAAG;EAAC;EAAA;EAClC,OAAOe,GAAG,CAACP,OAAO,CAAC,CAAC,CAAC;AACvB,CAAC;AAAC;AAAA;AAHWC,2BAAmB","names":["totalsGenerator","rows","total","forEach","row","data","item","label","parseInt","value","toFixed","exports","totalDonutValue","sum","i","length","calculatePercentage","num"],"sources":["/home/user/React Projects/payment-reports-test-task-master-updated/payment-reports-test-task-master/src/util/helper.ts"],"sourcesContent":["import { GenericTableData, RowsType } from \"types\";\n\nexport const totalsGenerator = (rows: RowsType[]) => {\n  let total = 0;\n  rows.forEach((row) =>\n    row.data.forEach((item: GenericTableData) => {\n      if (item.label === \"Amount\") total += parseInt(item.value, 10);\n    })\n  );\n  return total.toFixed(2);\n};\n\nexport const totalDonutValue = (data: GenericTableData[]) => {\n  let sum = 0;\n  for (let i = 0; i < data.length; i++) {\n    sum += parseInt(data[i].value, 10);\n  }\n  return sum;\n};\nexport const calculatePercentage = (total: number, value: number) => {\n  const num = (value / total) * 100;\n  return num.toFixed(2);\n};\n"]}